# Empty doc

==>
Nasl()

# SimpleInstr

break;

==>
Nasl(SimpleInstr(break))

# FuncDecl

function f(a, b) {
  continue;
  break;
}

==>
Nasl(FuncDecl(function,
              ArgDecl(Identifier, Identifier),
              Block(SimpleInstr(continue),
                    SimpleInstr(break))))

# NOP

function f() {
  ;
}

==>
Nasl(FuncDecl(function,
              ArgDecl(),
              Block(SimpleInstr)))

# Instr Block

{
 {
   ;
 }
}

==>
Nasl(Block(Block(SimpleInstr)))

# return

return 9;

==>
Nasl(SimpleInstr(return, Integer))

# return plain

return;

==>
Nasl(SimpleInstr(return))

# ()

return (9);

==>
Nasl(SimpleInstr(return, Integer))

# IP

return 0.1.2.3;

==>
Nasl(SimpleInstr(return, IpAddr(Integer, Integer, Integer, Integer)))

# #

# comment

==>
Nasl(Comment)

# []

return [1, 2];

==>
Nasl(SimpleInstr(return, ConstArray(Integer, Integer)))

# [=>]

return ["something" => 1, 2, 'x' => 3];

==>
Nasl(SimpleInstr(return, ConstArray(String, Integer, Integer, String, Integer)))

# var

return a;

==>
Nasl(SimpleInstr(return, Identifier))

# array el

return a[0];

==>
Nasl(SimpleInstr(return,
                 ArrayElem(Identifier,
                           Integer)))

# call

return f();

==>
Nasl(SimpleInstr(return,
                 FuncCall(Identifier,
                          ArgList)))


# call args

return f(1, a, x: "abc");

==>
Nasl(SimpleInstr(return,
                 FuncCall(Identifier,
                          ArgList(Integer,
                                  Identifier,
                                  NamedArg(Identifier,
                                           String)))))

# simple call

f();

==>
Nasl(SimpleInstr(FuncCall(Identifier,
                          ArgList)))

# ++ simple

a++;

==>
Nasl(SimpleInstr(Identifier))

# ++ expr

return --a;

==>
Nasl(SimpleInstr(return, Identifier))

# aff simple

a = 1;

==>
Nasl(SimpleInstr(Identifier, Integer))

# aff

return a >>>= 1;

==>
Nasl(SimpleInstr(return,
                 Aff(Identifier, Integer)))
