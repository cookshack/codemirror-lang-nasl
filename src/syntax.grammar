@precedence {
  right @right
}

//// Templates

list<x> { (x ',')* x? }

//// Root

@top Nasl { (instr | FuncDecl)* }

//// Function Declaration

FuncDecl { kw<'function'> identifier ArgDecl Block }

ArgDecl { '(' list<Identifier> ')' }

//// Block

Block { '{' instr* '}' }

//// Instruction

instr {
  SimpleInstr ';'
  | Block
  | IfBlock
  | loop
}

//// "Simple" Instruction

SimpleInstr {
  aff
  | postPreIncr
  | rep
  | FuncCall
  | kw<'return'> expr?
  | inc
  | loc
  | glob
  | kw<'break'>
  | kw<'continue'>
  | () // NOP
}

//// If

IfBlock { kw<'if'> '(' expr ')' instr (!right kw<'else'> instr)? }

//// Loops

loop { ForLoop | WhileLoop | RepeatLoop | ForeachLoop }

ForLoop { kw<'for'> ForExpr instr }
ForExpr { '(' AffFunc ';' expr ';' AffFunc ')' }

WhileLoop { kw<'while'> LoopExpr instr }
LoopExpr { '(' expr ')' }

RepeatLoop { kw<'repeat'> instr kw<'until'> expr ';' }

ForeachLoop { kw<'foreach'> Identifier LoopExpr instr }

AffFunc { aff | postPreIncr | FuncCall | () /* NOP */ }

//// Repitition

rep { FuncCall ckw<'x'> expr }

//// Include

inc { kw<'include'> IncExpr }
IncExpr { '(' String ')' }

//// Function Call

FuncCall { Identifier ArgList }

ArgList { '(' list<arg> ')' }

arg { expr | NamedArg }

NamedArg { Identifier ':' expr }

//// Affectation

aff {
  lvalue '=' expr
  | lvalue '+=' expr
  | lvalue '-=' expr
  | lvalue '*=' expr
  | lvalue '/=' expr
  | lvalue '%=' expr
  | lvalue '>>=' expr
  | lvalue '>>>=' expr
  | lvalue '<<=' expr
}

Aff { aff }

////

lvalue { Identifier | ArrayElem }

Identifier { identifier }

ArrayElem { Identifier '[' expr ']' }

postPreIncr { '++' lvalue | '--' lvalue | lvalue '++' | lvalue '--' }

//// Expression

expr {
  '(' expr ')'
  | expr !right '&&' expr
  | '!' expr
  | expr !right '||' expr
  | expr !right '+' expr
  | expr !right '-' expr
  | '-' expr
  | '~' expr
  | expr !right ('*' | '**' | '/' | '%' | '&' | '^' | '|' | '>>' | '>>>' | '<<') expr
  | postPreIncr
  // match nomatch re_match re_nomatch ...
  | expr !right ('><' | '>!<' | '=~' | '!~' | '<' | '>' | '==' | '!=' | '>=' | '<=') expr
  | var
  | Aff
  | IpAddr
  | atom
  | ConstArray
}

////

ConstArray { '[' list<arrayData> ']' }

arrayData { atom | String '=>' atom }

atom { Integer | String }

var { Identifier | ArrayElem | FuncCall }

IpAddr {
  Integer '.' Integer '.' Integer '.' Integer
}

// Local var decl

loc { kw<'local_var'> ArgDecl }

// Global var decl

glob { kw<'global_var'> ArgDecl }

////

@skip { whitespace | Comment }

// Keyword
kw<term> { @specialize[@name={term}]<identifier, term> }
// Contextual keyword
ckw<term> { @extend[@name={term}]<identifier, term> }

@tokens {
  whitespace {
    ($[ \t\r\n] | '\r'? '\n')+
  }

  identifier {
    $[A-Za-z_] $[A-Za-z0-9_]*
  }

  Integer {
    $[0-9]+
  }

  xChar { $[0-9a-fA-F\n] }

  char {
    '\\' $[\\nftrv"0'\n]
    | '\\x' xChar xChar xChar
    | !['\\]
  }

  String {
    "'" char* "'"
    | '"' !["]* '"'
  }

  Comment[isolate] { '#' ![\n\r]* }

  // literal tokens
  ';' '{' '}' '(' ')' '[' ']' '=>' ':' '++' '--'
  '=' '+=' '-=' '*=' '/=' '%=' '>>=' '>>>=' '<<='
  '&&' '!' '||' '+' '-' '~' '*' '**' '/' '%' '&' '^' '' '>>' '>>>' '<<'
  '><' '>!<' '=~' '!~' '<' '>' '==' '!=' '>=' '>=' '<='
}

//@external propSource highlighting from './highlight'
