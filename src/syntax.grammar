@precedence {
}

//// Templates

list<x> { (x ',')* x? }

//// Root

@top Nasl { (instr | FuncDecl)* }

//// Function Declaration

FuncDecl { kw<'function'> identifier ArgDecl Block }

ArgDecl { '(' list<Identifier> ')' }

//// Block

Block { '{' instr* '}' }

//// Instruction

instr {
  SimpleInstr ';'
  | Block
}

//// "Simple" Instruction

SimpleInstr {
  kw<'return'> expr
  | kw<'break'>
  | kw<'continue'>
  | () // NOP
}

//// If

//// Loops

////

//// Include

//// Function Call

FuncCall { Identifier ArgList }

ArgList { '(' list<arg> ')' }

arg { expr | NamedArg }

NamedArg { Identifier ':' expr }

//// Affectation

////

Identifier { identifier }

ArrayElem { Identifier '[' expr ']' }

//// Expression

expr {
  '(' expr ')'
  | var
  | IpAddr
  | atom
  | ConstArray
}

////

ConstArray { '[' list<arrayData> ']' }

arrayData { atom | String '=>' atom }

atom { Integer | String }

var { Identifier | ArrayElem | FuncCall }

IpAddr {
  Integer '.' Integer '.' Integer '.' Integer
}

@skip { whitespace | Comment }

kw<term> { @specialize[@name={term}]<identifier, term> }

@tokens {
  whitespace {
    ($[ \t\r\n] | '\r'? '\n')+
  }

  identifier {
    $[A-Za-z_] $[A-Za-z0-9_]*
  }

  Integer {
    $[0-9]+
  }

  xChar { $[0-9a-fA-F\n] }

  char {
    '\\' $[\\nftrv"0'\n]
    | '\\x' xChar xChar xChar
    | !['\\]
  }

  String {
    "'" char* "'"
    | '"' !["]* '"'
  }

  Comment[isolate] { '#' ![\n\r]* }

  // literal tokens
  ';' '{' '}' '(' ')' '[' ']' '=>' ':'
}

//@external propSource highlighting from './highlight'
